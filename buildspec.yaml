version: 0.2
phases:
    install:
        runtime-versions:
            golang: 1.18
    pre_build:
        on-failure: ABORT
        commands:
            - echo Logging in to Amazon ECR...
            - aws --version
            - _PASSWD=$(echo ${REPO_ECR} | cut -d\/ -f1)
            - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${_PASSWD}
            - REPOSITORY_URI=${REPO_ECR}
            - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            - IMAGE_TAG=${COMMIT_HASH:=latest}
    build:
        on-failure: ABORT
        commands:
            - echo Starting test! `date`
            - go mod init main_test && go get -u github.com/gorilla/mux && go mod tidy
            - go test
            - echo Build started on `date`
            - echo Building the Docker image...
            - docker build -t $REPOSITORY_URI:latest .
            - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    post_build:
        on-failure: ABORT
        commands:
            - echo Build completed on `date`
            - echo Pushing the Docker images...
            - docker push $REPOSITORY_URI:latest
            - docker push $REPOSITORY_URI:$IMAGE_TAG
            - echo Setting k8s `date`
            - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
            - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
            - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
            - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
            - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
            - echo "Update Kube Config"      
            - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
            - echo "Apply changes to kube manifests"
            - envsubst < k8s/deploy.yml | kubectl apply -f -
            - kubectl apply -f k8s/hpa.yml